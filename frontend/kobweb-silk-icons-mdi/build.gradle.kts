plugins {
    kotlin("multiplatform")
    id("org.jetbrains.compose")
    id("com.varabyte.kobweb.internal.publish")
}

group = "com.varabyte.kobweb"
version = libs.versions.kobweb.libs.get()

kotlin {
    js(IR) {
        browser()
        binaries.executable()
    }
    sourceSets {
        val jsMain by getting {
            dependencies {
                implementation(compose.web.core)
                implementation(compose.runtime)

                api(project(":frontend:kobweb-compose"))
            }
        }
    }
}

kobwebPublication {
    artifactId.set("kobweb-silk-icons-mdi")
    description.set("A collection of Kobweb Silk components that directly wrap Material Design icons")
}

enum class IconCategory {
    REGULAR,
    OUTLINE,
}

val regenerateIconsTask = tasks.register("regenerateIcons") {
    val srcFile = layout.projectDirectory.file("md-icon-list.txt")
    val dstFile =
        layout.projectDirectory.file("src/jsMain/kotlin/com/varabyte/kobweb/silk/components/icons/mdi/MdIcons.kt")

    inputs.files(srcFile, layout.projectDirectory.file("build.gradle.kts"))
    outputs.file(dstFile)

    // {SOLID=[ad, address-book, address-card, ...], REGULAR=[address-book, address-card, angry, ...], ... }
    val iconRawNames = srcFile.asFile
        .readLines().asSequence()
        .filter { line -> !line.startsWith("#") }
        .map { line ->
            line.split("=", limit = 2).let { parts ->
                val category = when (parts[0]) {
                    "mdr" -> IconCategory.REGULAR
                    "mdo" -> IconCategory.OUTLINE
                    else -> throw GradleException("Unexpected category string: ${parts[0]}")
                }
                val names = parts[1]

                category to names.split(",")
            }
        }
        .toMap()

    // For each icon name, figure out what categories they are in. This will affect the function signature we generate.
    // {ad=[SOLID], address-book=[SOLID, REGULAR], address-card=[SOLID, REGULAR], ...
    val iconCategories = mutableMapOf<String, MutableSet<IconCategory>>()
    iconRawNames.forEach { entry ->
        val category = entry.key
        entry.value.forEach { rawName ->
            iconCategories.computeIfAbsent(rawName, { mutableSetOf() }).add(category)
        }
    }

    // Sanity check results
    iconCategories
        .filterNot { entry ->
            val categories = entry.value
            categories.size == 1 ||
                (categories.size == 2 && categories.contains(IconCategory.REGULAR) && categories.contains(IconCategory.OUTLINE))
        }
        .let { invalidGroupings ->
            if (invalidGroupings.isNotEmpty()) {
                throw GradleException("Found unexpected groupings. An icon should only be in its own category OR it can have solid and regular versions: $invalidGroupings")
            }
        }

    // Generate four types of functions: solid only, regular only, solid or regular, and brand
    val iconMethodEntries = iconCategories
        .map { entry ->
            val rawName = entry.key
            val methodName = rawName.split("-").joinToString("") { it.capitalize() }
            val categories = entry.value

            when {
                categories.contains(IconCategory.REGULAR) -> {
                    "@Composable fun $methodName(modifier: Modifier = Modifier) = MdIcon(\"mdi $rawName\", modifier, IconCategory.REGULAR)"
                }
                categories.contains(IconCategory.OUTLINE) -> {
                    "@Composable fun $methodName(modifier: Modifier = Modifier) = MdIcon(\"mdi $rawName\", modifier, IconCategory.OUTLINE)"
                }
                else -> GradleException("Unhandled icon entry: $entry")
            }
        }

    val iconsCode = """
@file:Suppress("unused", "SpellCheckingInspection")

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// THIS FILE IS AUTOGENERATED.
//
// Do not edit this file by hand. Instead, update `md-icon-list.txt` in the module root and run the Gradle
// task "regenerateIcons"
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

package com.varabyte.kobweb.silk.components.icons.mdi

import androidx.compose.runtime.*
import com.varabyte.kobweb.compose.ui.Modifier
import com.varabyte.kobweb.compose.ui.toAttrs
import org.jetbrains.compose.web.dom.Span

enum class IconCategory(internal val className: String) {
    REGULAR("mdr"),
    OUTLINE("mdo");
}

enum class IconStyle(internal val category: IconCategory) {
    REGULAR(IconCategory.REGULAR),
    OUTLINE(IconCategory.OUTLINE);
}

@Composable
fun MdIcon(
    name: String,
    modifier: Modifier,
    style: IconCategory = IconCategory.REGULAR,
) {
    Span(
        attrs = modifier.toAttrs {
            classes(style.className, "mdi-${'$'}name")
        }
    )
}

${iconMethodEntries.joinToString("\n")}
    """.trimIndent()

    println(dstFile.asFile.writeText(iconsCode))
}

tasks.named("compileKotlinJs") {
    dependsOn(regenerateIconsTask)
}

tasks.named("sourcesJar") {
    dependsOn(regenerateIconsTask)
}

tasks.named("jsSourcesJar") {
    dependsOn(regenerateIconsTask)
}